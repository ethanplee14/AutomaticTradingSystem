/**
 * Client Portal Web API
 * Production version of the Client Portal Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { HistoryDataData } from './historyDataData';

export class HistoryData {
    /**
    * Underlying Symbol of the corresponding contract
    */
    'symbol'?: string;
    /**
    * companyName of the corresponding contract
    */
    'text'?: string;
    /**
    * priceFactor is price increment obtained from display rule
    */
    'priceFactor'?: number;
    /**
    * start date time in the format YYYYMMDD-HH:mm:ss
    */
    'startTime'?: string;
    /**
    * High value during this time series with format %h/%v/%t. %h is the high price (scaled by priceFactor), %v is volume (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart 
    */
    'high'?: string;
    /**
    * Low value during this time series with format %l/%v/%t. %l is the low price (scaled by priceFactor), %v is volume (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart 
    */
    'low'?: string;
    /**
    * The duration for the historical data request
    */
    'timePeriod'?: string;
    /**
    * The number of seconds in a bar
    */
    'barLength'?: number;
    /**
    * Market Data Availability. The field may contain two chars. The first char is the primary code: S = Streaming, R = Realtime, D = Delayed, Z = Frozen, Y = Frozen Delayed. The second char is the secondary code: P = Snapshot Available, p = Consolidated. 
    */
    'mdAvailability'?: string;
    /**
    * The time it takes, in milliseconds, to process the historical data request
    */
    'mktDataDelay'?: number;
    /**
    * The historical data returned includes outside of regular trading marketHrs
    */
    'outsideRth'?: boolean;
    /**
    * The number of seconds in the trading day
    */
    'tradingDayDuration'?: number;
    'volumeFactor'?: number;
    'priceDisplayRule'?: number;
    'priceDisplayValue'?: string;
    'negativeCapable'?: boolean;
    'messageVersion'?: number;
    'data'?: Array<HistoryDataData>;
    /**
    * total number of points
    */
    'points'?: number;
    'travelTime'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "symbol",
            "baseName": "symbol",
            "type": "string"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        },
        {
            "name": "priceFactor",
            "baseName": "priceFactor",
            "type": "number"
        },
        {
            "name": "startTime",
            "baseName": "startTime",
            "type": "string"
        },
        {
            "name": "high",
            "baseName": "high",
            "type": "string"
        },
        {
            "name": "low",
            "baseName": "low",
            "type": "string"
        },
        {
            "name": "timePeriod",
            "baseName": "timePeriod",
            "type": "string"
        },
        {
            "name": "barLength",
            "baseName": "barLength",
            "type": "number"
        },
        {
            "name": "mdAvailability",
            "baseName": "mdAvailability",
            "type": "string"
        },
        {
            "name": "mktDataDelay",
            "baseName": "mktDataDelay",
            "type": "number"
        },
        {
            "name": "outsideRth",
            "baseName": "outsideRth",
            "type": "boolean"
        },
        {
            "name": "tradingDayDuration",
            "baseName": "tradingDayDuration",
            "type": "number"
        },
        {
            "name": "volumeFactor",
            "baseName": "volumeFactor",
            "type": "number"
        },
        {
            "name": "priceDisplayRule",
            "baseName": "priceDisplayRule",
            "type": "number"
        },
        {
            "name": "priceDisplayValue",
            "baseName": "priceDisplayValue",
            "type": "string"
        },
        {
            "name": "negativeCapable",
            "baseName": "negativeCapable",
            "type": "boolean"
        },
        {
            "name": "messageVersion",
            "baseName": "messageVersion",
            "type": "number"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "Array<HistoryDataData>"
        },
        {
            "name": "points",
            "baseName": "points",
            "type": "number"
        },
        {
            "name": "travelTime",
            "baseName": "travelTime",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return HistoryData.attributeTypeMap;
    }
}

